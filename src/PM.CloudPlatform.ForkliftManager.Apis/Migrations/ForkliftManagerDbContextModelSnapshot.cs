// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PM.CloudPlatform.ForkliftManager.Apis.Data;

namespace PM.CloudPlatform.ForkliftManager.Apis.Migrations
{
    [DbContext(typeof(ForkliftManagerDbContext))]
    partial class ForkliftManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("BuyTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CarModel")
                        .HasColumnType("text");

                    b.Property<Guid>("CarTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ElectronicFenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("LastLengthOfUse")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastMaintenanceOfTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LengthOfUse")
                        .HasColumnType("integer");

                    b.Property<string>("LicensePlateNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfMaintenance")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RentalCompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RentalRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("ElectronicFenceId");

                    b.HasIndex("RentalCompanyId");

                    b.HasIndex("RentalRecordId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.CarType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarType");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.ElectronicFence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LngLats")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("RentalCompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RentalCompanyId");

                    b.ToTable("ElectronicFence");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.GpsPositionRecords", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AccState")
                        .HasColumnType("smallint");

                    b.Property<int>("CellId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<byte>("DataReportingMode")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GpsRealTimeHeadIn")
                        .HasColumnType("integer");

                    b.Property<int>("LAC")
                        .HasColumnType("integer");

                    b.Property<decimal>("Lat")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Lon")
                        .HasColumnType("numeric");

                    b.Property<int>("MCC")
                        .HasColumnType("integer");

                    b.Property<byte>("MNC")
                        .HasColumnType("smallint");

                    b.Property<long?>("Mileage")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<byte>("Speed")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("GpsPositionRecords");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.RentalCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RentalCompany");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.RentalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<Guid>("RentalCompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("RentalEmployeeName")
                        .HasColumnType("text");

                    b.Property<string>("RentalEmployeeTel")
                        .HasColumnType("text");

                    b.Property<DateTime>("RentalEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RentalStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReturnAckEmployeeName")
                        .HasColumnType("text");

                    b.Property<string>("ReturnAckEmployeeTel")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReturnTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RentalCompanyId");

                    b.ToTable("RentalRecord");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.Terminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<string>("IMEI")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Terminal");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.TerminalBindRecords", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("TerminalId");

                    b.ToTable("TerminalBindRecords");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.TerminalLoginRecords", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TerminalId");

                    b.ToTable("TerminalLoginRecords");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.UseRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LengthOfTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("UseRecord");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifyUserName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.Car", b =>
                {
                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.CarType", "CarType")
                        .WithMany()
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.ElectronicFence", null)
                        .WithMany("Cars")
                        .HasForeignKey("ElectronicFenceId");

                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.RentalCompany", null)
                        .WithMany("Cars")
                        .HasForeignKey("RentalCompanyId");

                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.RentalRecord", null)
                        .WithMany("Cars")
                        .HasForeignKey("RentalRecordId");

                    b.Navigation("CarType");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.ElectronicFence", b =>
                {
                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.RentalCompany", "RentalCompany")
                        .WithMany("ElectronicFences")
                        .HasForeignKey("RentalCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalCompany");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.Module", b =>
                {
                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.Role", null)
                        .WithMany("Modules")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.RentalRecord", b =>
                {
                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.RentalCompany", "RentalCompany")
                        .WithMany()
                        .HasForeignKey("RentalCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalCompany");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.Terminal", b =>
                {
                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.TerminalBindRecords", b =>
                {
                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.Terminal", "Terminal")
                        .WithMany()
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.TerminalLoginRecords", b =>
                {
                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.Terminal", "Terminal")
                        .WithMany()
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.UseRecord", b =>
                {
                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.User", b =>
                {
                    b.HasOne("PM.CloudPlatform.ForkliftManager.Apis.Entities.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.ElectronicFence", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.RentalCompany", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("ElectronicFences");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.RentalRecord", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("PM.CloudPlatform.ForkliftManager.Apis.Entities.Role", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
